!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!                                            
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#
$^$^$^$^$^$^$^$^$^$^$$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$%^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$
&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&
                                                Notes for Bash Scripting, System Monitoring, and System Security                             
&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&
$^$^$^$^$^$^$^$^$^$^$$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$%^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#
!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!
                            
                            Table of Contents

1. Bash Scripting 

o Introduction
o Basic Syntax and Structure
o Variables and Data Types
o Control Flow
o Input/Output
o Command-Line Arguments
o Advanced Topics
o Example Scripts

2. System Monitoring 

o Introduction
o Resource Monitoring
o Process Monitoring
o Log Analysis
o Performance Tuning
o Example Scripts

3. System Security

o Introduction
o User and Group Management
o File and Directory Permissions
o Firewall Configuration
o Example Scripts

!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!                                            
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#
$^$^$^$^$^$^$^$^$^$^$$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$%^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$
&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&
&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&
$^$^$^$^$^$^$^$^$^$^$$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$%^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#
!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!


                                                            1. Bash Scripting
                            Introduction

Bash scripting is a powerful tool for automating tasks and creating custom scripts in Linux environments. It allows you to combine various system commands and control the flow of execution using programming constructs.
Basic Syntax and Structure:

* Shebang line: The first line of a Bash script should be   #!/bin/bash   to specify the interpreter.
* Comments: Use   #   to add comments to your script.
* Variables: Declare variables using a dollar sign and a name, e.g.,   my_variable=value.
* Command execution: Use the backtick () or $() to execute commands within a script and capture their output.

Variables and Data Types:

* Strings: Store sequences of characters, e.g., name="Alice".
* Numbers: Store numerical values, e.g., age=30.
* Arrays: Store multiple values in a single variable, e.g., fruits=("apple" "banana" "orange").

Control Flow

* Conditional statements: 

o if-then-else: Execute code based on a condition.
o case: Match a value against multiple patterns.
* Loops: 
o for: Iterate over a list of values.
o while: Repeat code as long as a condition is true.
o until: Repeat code until a condition is true.

Input/Output

* Reading input: Use the read command to read user input.
* Writing output: Use the echo command to print text to the console.
* File I/O: Use redirection (>, >>, <) and piping (|) to handle file input and output.

Command-Line Arguments

* Accessing arguments: Use $1, $2, $3, etc., to access command-line arguments.
* Special variables: $@ and $* represent all arguments.

Advanced Topics

* Functions: Define reusable blocks of code.
* Regular expressions: Pattern matching for text manipulation.
* Debugging: Use set -x to enable tracing and set -e to stop execution on errors.

Example Scripts

1. Hello, World!
Bash

#!/bin/bash

echo "Hello, World!"
Use code with caution.

2. Simple calculator
Bash

#!/bin/bash

echo "Enter two numbers:"
read num1 num2

sum=$((num1 + num2))
echo "Sum: $sum"

Use code with caution.

2. System Monitoring

Introduction

System monitoring is essential for understanding the performance and health of your system. It involves tracking various metrics such as CPU usage, memory consumption, disk I/O, and network traffic.

Resource Monitoring

* CPU usage: Use top, htop, or mpstat to monitor CPU activity.
* Memory usage: Use free or top to check memory utilization.
* Disk I/O: Use iostat or df to monitor disk usage and performance.
* Network traffic: Use iftop or netstat to analyze network traffic.

Process Monitoring

* Listing processes: Use ps or top to list running processes.
* Killing processes: Use kill or pkill to terminate processes.

Log Analysis

* Viewing logs: Use tail, head, or less to examine log files.
* Filtering logs: Use grep or awk to search for specific patterns in logs.

Performance Tuning

* Identifying bottlenecks: Analyze resource usage and identify performance issues.
* Optimizing system settings: Adjust kernel parameters or system configurations.

Example Scripts

1. Check disk usage
Bash

#!/bin/bash

df -h

Use code with caution.

2. Monitor CPU usage
Bash

#!/bin/bash

top

Use code with caution.

3. System Security

Introduction

System security is crucial to protect your system from unauthorized access and malicious attacks. It involves implementing various measures to safeguard your data and resources.

User and Group Management

* Creating users: Use useradd to create new users.
* Managing passwords: Use passwd to change passwords.
* Creating groups: Use groupadd to create new groups.
* Assigning permissions: Use usermod and groups to assign users to groups.

File and Directory Permissions

* Understanding permissions: Each file and directory has read, write, and execute permissions for the owner, group, and others.
* Changing permissions: Use chmod to modify permissions.
* Changing ownership: Use chown to change the owner of a file or directory.

Firewall Configuration

* Using iptables: Configure firewall rules using iptables.
* Allowing traffic: Use iptables -A INPUT -p tcp -j ACCEPT to allow incoming TCP traffic.
* Denying traffic: Use iptables -A INPUT -j DROP to deny all incoming traffic.

Example Scripts

1. Create a new user
Bash

#!/bin/bash

useradd newuser

Use code with caution.

2. Change file permissions
Bash

#!/bin/bash

chmod 755 myfile
Use code with caution.



!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!                                            
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#
$^$^$^$^$^$^$^$^$^$^$$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$%^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$
&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&
&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&
$^$^$^$^$^$^$^$^$^$^$$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$%^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#
!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!





Explanation of the Script Concepts (from Least Complex to Most Complex):
Comments (#):

In the script, anything written after a # symbol is ignored by the computer. Itâ€™s called a comment. Comments are used to explain the code to anyone reading it, so they know what each part does. Comments are important to help you understand what you are working on or were trying to do in your code and act as reminders. There is no limit to the amount of comments or their detail you should or could have.
echo:

The echo command is used to display a message on the screen. It's like making the computer "say" something to the user. These are useful for you display prompts, comments or instructions to the user.
The echo command is also a useful tool to test your code. Putting in an echo both inside and outside an if block can help you see what is working in your code or what is broken. echo statements used fir troubleshooting should always be removed when troubleshooting is complete.
Variables:

Variables are like containers that store values. In this script, age_years and age_days are variables.
read -p "Enter your age in years: " age_years takes the user's input and stores it in the age_years variable.
Tip: you can use an echo to display the value of a variable for troubleshooting purposes.
if Statement:

The if statement is used to check if something is true. It helps us control which parts of the script run based on a condition.
For example, we use if to make sure the userâ€™s input is valid.
Regex (^[0-9]+$):

This part is a pattern used to match text. Itâ€™s called a "regular expression" (or regex).
^[0-9]+$ means that the input must be made up of digits (0-9), and nothing else. This makes sure the user only types numbers.
^ means "start of input" and $ means "end of input". [0-9] means any digit, and + means "at least one or more".
Resource to learning more about Regex: regexlearn.com/learn/regex101

Tip: Once you have typed or followed the instructions - hit the enter key to progress.
Resource for testing and playing with Regex: regex101.com/

[[ ]] and !~:

[[ ]] is used to test conditions in Bash. It helps make the script safer and easier to write.
!~ means "does not match". In this script, [[ ! $age_years =~ ^[0-9]+$ ]] checks if the input does not match the pattern (meaning itâ€™s not a number).
Tip: Other symbols you may want to explore are ==, |&nbsp;, &nbsp;&gt;&nbsp;, &nbsp;&lt;&nbsp;, -eq, -ne, -gt.

We refer to these symbols as "Conditionals" and there are many more conditionals than what I have listed here.
 Arithmetic Calculation ($(( ))):

$(( )) is used to do math calculations in Bash.
age_days=$((age_years * 365)) calculates how many days are in the given number of years. It multiplies age_years by 365.
Exit Code (exit 1):

exit 1 ends the script. The number 1 is an error code, which means something went wrong.
If the user types something thatâ€™s not a valid number, the script stops here.
Tip: use an echo statement to give a clear message to yourself, and your user about what happened.